//
// Generated file, do not edit! Created by opp_msgtool 6.1 from Physical_layer/Drone_block/DroneMessages.msg.
//

#ifndef __DRONEMESSAGES_M_H
#define __DRONEMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class SetBase;
class TakeOff;
class LandDrone;
class MoveTo;
class SetVelocity;
class SetAcceleration;
class StopDrone;
class PowerOnDrone;
class PowerOffDrone;
class GetStatusDrone;
class GetPositionDrone;
class GetAltitudeDrone;
class GetBatteryDrone;
/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:4</tt> by opp_msgtool.
 * <pre>
 * message SetBase
 * {
 *     string state = "SETBASE";
 * }
 * </pre>
 */
class SetBase : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SETBASE";

  private:
    void copy(const SetBase& other);

  protected:
    bool operator==(const SetBase&) = delete;

  public:
    SetBase(const char *name=nullptr, short kind=0);
    SetBase(const SetBase& other);
    virtual ~SetBase();
    SetBase& operator=(const SetBase& other);
    virtual SetBase *dup() const override {return new SetBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:9</tt> by opp_msgtool.
 * <pre>
 * message TakeOff
 * {
 *     string state = "TAKEOFF";
 * }
 * </pre>
 */
class TakeOff : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "TAKEOFF";

  private:
    void copy(const TakeOff& other);

  protected:
    bool operator==(const TakeOff&) = delete;

  public:
    TakeOff(const char *name=nullptr, short kind=0);
    TakeOff(const TakeOff& other);
    virtual ~TakeOff();
    TakeOff& operator=(const TakeOff& other);
    virtual TakeOff *dup() const override {return new TakeOff(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TakeOff& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TakeOff& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:14</tt> by opp_msgtool.
 * <pre>
 * message LandDrone
 * {
 *     string state = "LANDING";
 * }
 * </pre>
 */
class LandDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "LANDING";

  private:
    void copy(const LandDrone& other);

  protected:
    bool operator==(const LandDrone&) = delete;

  public:
    LandDrone(const char *name=nullptr, short kind=0);
    LandDrone(const LandDrone& other);
    virtual ~LandDrone();
    LandDrone& operator=(const LandDrone& other);
    virtual LandDrone *dup() const override {return new LandDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LandDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LandDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:19</tt> by opp_msgtool.
 * <pre>
 * message MoveTo
 * {
 *     string state = "MOVE";
 * }
 * </pre>
 */
class MoveTo : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "MOVE";

  private:
    void copy(const MoveTo& other);

  protected:
    bool operator==(const MoveTo&) = delete;

  public:
    MoveTo(const char *name=nullptr, short kind=0);
    MoveTo(const MoveTo& other);
    virtual ~MoveTo();
    MoveTo& operator=(const MoveTo& other);
    virtual MoveTo *dup() const override {return new MoveTo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MoveTo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MoveTo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:24</tt> by opp_msgtool.
 * <pre>
 * message SetVelocity
 * {
 *     string state = "SETVEL";
 * }
 * </pre>
 */
class SetVelocity : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SETVEL";

  private:
    void copy(const SetVelocity& other);

  protected:
    bool operator==(const SetVelocity&) = delete;

  public:
    SetVelocity(const char *name=nullptr, short kind=0);
    SetVelocity(const SetVelocity& other);
    virtual ~SetVelocity();
    SetVelocity& operator=(const SetVelocity& other);
    virtual SetVelocity *dup() const override {return new SetVelocity(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetVelocity& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetVelocity& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:29</tt> by opp_msgtool.
 * <pre>
 * message SetAcceleration
 * {
 *     string state = "SETACCEL";
 * }
 * </pre>
 */
class SetAcceleration : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SETACCEL";

  private:
    void copy(const SetAcceleration& other);

  protected:
    bool operator==(const SetAcceleration&) = delete;

  public:
    SetAcceleration(const char *name=nullptr, short kind=0);
    SetAcceleration(const SetAcceleration& other);
    virtual ~SetAcceleration();
    SetAcceleration& operator=(const SetAcceleration& other);
    virtual SetAcceleration *dup() const override {return new SetAcceleration(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SetAcceleration& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SetAcceleration& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:34</tt> by opp_msgtool.
 * <pre>
 * message StopDrone
 * {
 *     string state = "STOP";
 * }
 * </pre>
 */
class StopDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "STOP";

  private:
    void copy(const StopDrone& other);

  protected:
    bool operator==(const StopDrone&) = delete;

  public:
    StopDrone(const char *name=nullptr, short kind=0);
    StopDrone(const StopDrone& other);
    virtual ~StopDrone();
    StopDrone& operator=(const StopDrone& other);
    virtual StopDrone *dup() const override {return new StopDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StopDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StopDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:39</tt> by opp_msgtool.
 * <pre>
 * message PowerOnDrone
 * {
 *     string state = "POWER_ON";
 * }
 * </pre>
 */
class PowerOnDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "POWER_ON";

  private:
    void copy(const PowerOnDrone& other);

  protected:
    bool operator==(const PowerOnDrone&) = delete;

  public:
    PowerOnDrone(const char *name=nullptr, short kind=0);
    PowerOnDrone(const PowerOnDrone& other);
    virtual ~PowerOnDrone();
    PowerOnDrone& operator=(const PowerOnDrone& other);
    virtual PowerOnDrone *dup() const override {return new PowerOnDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PowerOnDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PowerOnDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:44</tt> by opp_msgtool.
 * <pre>
 * message PowerOffDrone
 * {
 *     string state = "POWER_OFF";
 * }
 * </pre>
 */
class PowerOffDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "POWER_OFF";

  private:
    void copy(const PowerOffDrone& other);

  protected:
    bool operator==(const PowerOffDrone&) = delete;

  public:
    PowerOffDrone(const char *name=nullptr, short kind=0);
    PowerOffDrone(const PowerOffDrone& other);
    virtual ~PowerOffDrone();
    PowerOffDrone& operator=(const PowerOffDrone& other);
    virtual PowerOffDrone *dup() const override {return new PowerOffDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PowerOffDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PowerOffDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:49</tt> by opp_msgtool.
 * <pre>
 * message GetStatusDrone
 * {
 *     string state = "SENDSTAT";
 * }
 * </pre>
 */
class GetStatusDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SENDSTAT";

  private:
    void copy(const GetStatusDrone& other);

  protected:
    bool operator==(const GetStatusDrone&) = delete;

  public:
    GetStatusDrone(const char *name=nullptr, short kind=0);
    GetStatusDrone(const GetStatusDrone& other);
    virtual ~GetStatusDrone();
    GetStatusDrone& operator=(const GetStatusDrone& other);
    virtual GetStatusDrone *dup() const override {return new GetStatusDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GetStatusDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GetStatusDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:54</tt> by opp_msgtool.
 * <pre>
 * message GetPositionDrone
 * {
 *     string state = "SEND_POS";
 * }
 * </pre>
 */
class GetPositionDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SEND_POS";

  private:
    void copy(const GetPositionDrone& other);

  protected:
    bool operator==(const GetPositionDrone&) = delete;

  public:
    GetPositionDrone(const char *name=nullptr, short kind=0);
    GetPositionDrone(const GetPositionDrone& other);
    virtual ~GetPositionDrone();
    GetPositionDrone& operator=(const GetPositionDrone& other);
    virtual GetPositionDrone *dup() const override {return new GetPositionDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GetPositionDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GetPositionDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:59</tt> by opp_msgtool.
 * <pre>
 * message GetAltitudeDrone
 * {
 *     string state = "SEND_ALT";
 * }
 * </pre>
 */
class GetAltitudeDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SEND_ALT";

  private:
    void copy(const GetAltitudeDrone& other);

  protected:
    bool operator==(const GetAltitudeDrone&) = delete;

  public:
    GetAltitudeDrone(const char *name=nullptr, short kind=0);
    GetAltitudeDrone(const GetAltitudeDrone& other);
    virtual ~GetAltitudeDrone();
    GetAltitudeDrone& operator=(const GetAltitudeDrone& other);
    virtual GetAltitudeDrone *dup() const override {return new GetAltitudeDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GetAltitudeDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GetAltitudeDrone& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Physical_layer/Drone_block/DroneMessages.msg:64</tt> by opp_msgtool.
 * <pre>
 * message GetBatteryDrone
 * {
 *     string state = "SEND_BATT";
 * }
 * </pre>
 */
class GetBatteryDrone : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string state = "SEND_BATT";

  private:
    void copy(const GetBatteryDrone& other);

  protected:
    bool operator==(const GetBatteryDrone&) = delete;

  public:
    GetBatteryDrone(const char *name=nullptr, short kind=0);
    GetBatteryDrone(const GetBatteryDrone& other);
    virtual ~GetBatteryDrone();
    GetBatteryDrone& operator=(const GetBatteryDrone& other);
    virtual GetBatteryDrone *dup() const override {return new GetBatteryDrone(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getState() const;
    virtual void setState(const char * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GetBatteryDrone& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GetBatteryDrone& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline SetBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<SetBase*>(ptr.get<cObject>()); }
template<> inline TakeOff *fromAnyPtr(any_ptr ptr) { return check_and_cast<TakeOff*>(ptr.get<cObject>()); }
template<> inline LandDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<LandDrone*>(ptr.get<cObject>()); }
template<> inline MoveTo *fromAnyPtr(any_ptr ptr) { return check_and_cast<MoveTo*>(ptr.get<cObject>()); }
template<> inline SetVelocity *fromAnyPtr(any_ptr ptr) { return check_and_cast<SetVelocity*>(ptr.get<cObject>()); }
template<> inline SetAcceleration *fromAnyPtr(any_ptr ptr) { return check_and_cast<SetAcceleration*>(ptr.get<cObject>()); }
template<> inline StopDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<StopDrone*>(ptr.get<cObject>()); }
template<> inline PowerOnDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<PowerOnDrone*>(ptr.get<cObject>()); }
template<> inline PowerOffDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<PowerOffDrone*>(ptr.get<cObject>()); }
template<> inline GetStatusDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<GetStatusDrone*>(ptr.get<cObject>()); }
template<> inline GetPositionDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<GetPositionDrone*>(ptr.get<cObject>()); }
template<> inline GetAltitudeDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<GetAltitudeDrone*>(ptr.get<cObject>()); }
template<> inline GetBatteryDrone *fromAnyPtr(any_ptr ptr) { return check_and_cast<GetBatteryDrone*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DRONEMESSAGES_M_H

